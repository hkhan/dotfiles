function cv () {
           cdargs "$1" && cd "'cat "$HOME/.cdargsresult"'" ;
}

#-----------------------------#
# FUNCTIONS		      
#-----------------------------#

# case insensitive recursive grep for text in current directory in all non-binary files
function grepAllRecursive() {
	grep -riI $1 .
}

# show the top 10 disk space hogs in the specified directory
function ducks() {
	du -cks * | sort -rn | cut -f2 | xargs du -sh 2>/dev/null | head -11
}

# displays a multi-line prompt, useful for long dir structures
function multiLinePrompt() {
	if [ $(basename ${0#-}) == "bash" ] ; then
		export PS1='\[\e]0;\h \u \w\a\]\[\e[0;34m\]\u@\h \[\e[33m\]\w\[\e[0;32m\]\n\$ '
	else
		HOST=`hostname`
		ESC=`echo "\033"`
		BEL=`echo "\007"`
		RAW=`echo "\r"`
		export PS1='-${RAW}${ESC}]0;${HOST} ${USER}${BEL}-${ESC}[0;34m${USER}${ESC}[0m@${ESC}[0;34m${HOST%%.*}${ESC}[0;33m${ESC}[0m $ '
	fi
}

# displays a compact prompt, useful for long dir structures, only shows current dir
function compactPrompt() {
	#PS1="\[\033]0;\u@\h: \w\007\]\u@\h:\W\\$ "
	PS1="\[\033]0;\u@\h: \w\007\]\u@\h:\[\e[33m\]\W\\[\e[0m\]\$ "
}

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
 
function git_prompt {
  local         RED="\[\033[0;31m\]"
  local   LIGHT_RED="\[\033[1;31m\]"
  local      YELLOW="\[\033[0;33m\]"
  local LIGHT_GREEN="\[\033[1;32m\]"
  local       WHITE="\[\033[1;37m\]"
  local  LIGHT_GRAY="\[\033[0;37m\]"
  local LIGHT_PURPLE="\[\033[1;34m\]"
  case $TERM in
    xterm*)
    TITLEBAR='\[\033]0;\u@\h:\w\007\]'
    ;;
    *)
    TITLEBAR=""
    ;;
  esac
 
PS1="${TITLEBAR}\
$LIGHT_PURPLE\w$YELLOW\$(parse_git_branch)\
\n$LIGHT_GRAY\$ "
PS2='> '
PS4='+ '
}
#export PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/~}\007";'
#export PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}:
